'Verossimilhança completa do modelo nulo:', verossimilhança, "\n",
'Graus de liberdade',length(dados)-ncol(cov)-1
)
}
cov_model(data = am, n = 1, cov = cov_mtcars)
cov_model <- function(data, n, cov){
dados <- data
vars <- as.matrix(cbind(rep(1, times = length(dados)), cov))
pars <- matrix(nrow = ncol(vars), 1)
ll <-  function(pars){
fn_dados <- 0
for(i in c(1:length(dados))){
fato <- log(factorial(n)/(factorial(n-dados[i])*factorial(dados[i])))
rep <- fato + dados[i]*vars[i,]%*%pars - n*log(1+ exp(vars[i,]%*%pars))
fn_dados <- fn_dados + rep
}
return(-fn_dados)
}
res <- suppressWarnings(optim(ll, par = c(rep(0, times = ncol(cov)+1)), method = 'BFGS',
upper = 10^3, lower = -10^3))
parametro <- res$par
verossimilhança <- res$value
cat('Parâmetro estimado:', parametro,'\n',
'Verossimilhança completa do modelo nulo:', verossimilhança, "\n",
'Graus de liberdade',length(dados)-ncol(cov)-1
)
}
cov_model(data = am, n = 1, cov = cov_mtcars)
cov_model <- function(data, n, cov){
dados <- data
vars <- as.matrix(cbind(rep(1, times = length(dados)), cov))
pars <- matrix(nrow = ncol(vars), 1)
fn_dados <- 0
ll <-  function(pars){
for(i in c(1:length(dados))){
fato <- log(factorial(n)/(factorial(n-dados[i])*factorial(dados[i])))
rep <- fato + dados[i]*vars[i,]%*%pars - n*log(1+ exp(vars[i,]%*%pars))
fn_dados <- fn_dados + rep
}
return(-fn_dados)
}
res <- suppressWarnings(optim(ll, par = c(rep(0, times = ncol(cov)+1)), method = 'BFGS',
upper = 10^3, lower = -10^3))
parametro <- res$par
verossimilhança <- res$value
cat('Parâmetro estimado:', parametro,'\n',
'Verossimilhança completa do modelo nulo:', verossimilhança, "\n",
'Graus de liberdade',length(dados)-ncol(cov)-1
)
}
cov_model(data = am, n = 1, cov = cov_mtcars)
test
vars <- as.matrix(cbind(rep(1, times = length(am)), cov_mtcars)
cov_model <- function(data, n, cov){
dados <- data
vars <- as.matrix(cbind(rep(1, times = length(dados)), cov))
pars <- matrix(nrow = ncol(vars), 1)
fn_dados <- 0
ll <-  function(pars){
for(i in c(1:length(dados))){
fato <- log(factorial(n)/(factorial(n-dados[i])*factorial(dados[i])))
rep <- fato + dados[i]*vars[i,]%*%pars - n*log(1+ exp(vars[i,]%*%pars))
fn_dados <- fn_dados + rep
}
return(-fn_dados)
}
res <- suppressWarnings(optim(ll, par = c(rep(0, times = ncol(cov)+1)), method = 'BFGS',
upper = 10^3, lower = -10^3))
parametro <- res$par
verossimilhança <- res$value
cat('Parâmetro estimado:', parametro,'\n',
'Verossimilhança completa do modelo nulo:', verossimilhança, "\n",
'Graus de liberdade',length(dados)-ncol(cov)-1
)
}
cov_model(data = am, n = 1, cov = cov_mtcars)
test <- glm(am~cyl + hp + mpg, family = binomial())
logLik(test)
test
vars <- as.matrix(cbind(rep(1, times = length(am)), cov_mtcars))
vars
vars <- as.matrix(cbind(am, rep(1, times = length(am)), cov_mtcars))
vars
mtcars
View(cov_mtcars)
View(vars)
head(mtcars)
cov_model <- function(dados, n, cov){
vars <- as.matrix(cbind(rep(1, times = length(dados)), cov))
pars <- matrix(nrow = ncol(vars), 1)
fn_dados <- 0
ll <-  function(pars){
for(i in c(1:length(dados))){
fato <- log(factorial(n)/(factorial(n-dados[i])*factorial(dados[i])))
rep <- fato + dados[i]*vars[i,]%*%pars - n*log(1+ exp(vars[i,]%*%pars))
fn_dados <- fn_dados + rep
}
return(-fn_dados)
}
res <- suppressWarnings(optim(ll, par = c(rep(0, times = ncol(cov)+1)), method = 'BFGS',
upper = 10^3, lower = -10^3))
parametro <- res$par
verossimilhança <- res$value
cat('Parâmetro estimado:', parametro,'\n',
'Verossimilhança completa do modelo nulo:', verossimilhança, "\n",
'Graus de liberdade',length(dados)-ncol(cov)-1
)
}
cov_model(data = am, n = 1, cov = cov_mtcars)
cov_model(dados = am, n = 1, cov = cov_mtcars)
cov_model <- function(dados, n, cov){
vars <- as.matrix(cbind(rep(1, times = length(dados)), cov))
pars <- matrix(nrow = ncol(vars), 1)
fn_dados <- 0
ll <-  function(pars){
for(i in c(1:length(dados))){
fato <- log(factorial(n)/(factorial(n-dados[i])*factorial(dados[i])))
rep <- fato + dados[i]*vars[i,]%*%pars - n*log(1+ exp(vars[i,]%*%pars))
fn_dados <- fn_dados + rep
}
return(-fn_dados)
}
res <- suppressWarnings(optim(ll, par = c(rep(0, times = ncol(cov)+1)), method = 'BFGS',
upper = 10^3, lower = -10^3))
parametro <- res$par
verossimilhança <- res$value
cat('Parâmetro estimado:', parametro,'\n',
'Verossimilhança completa do modelo nulo:', verossimilhança, "\n",
'Graus de liberdade',length(dados)-ncol(cov)-1
)
}
cov_model(dados = am, n = 1, cov = cov_mtcars)
test
cov_model <- function(dados, n, cov){
vars <- as.matrix(cbind(rep(1, times = length(dados)), cov))
pars <- matrix(nrow = ncol(vars), 1)
fn_dados <- 0
ll <-  function(pars){
for(i in c(1:length(dados))){
fato <- log(factorial(n)/(factorial(n-dados[i])*factorial(dados[i])))
rep <- fato + dados[i]*vars[i,]%*%pars - n*log(1+ exp(vars[i,]%*%pars))
fn_dados <- fn_dados + rep
}
return(-fn_dados)
}
res <- suppressWarnings(optim(ll, par = rep(0, times = ncol(vars)), method = 'BFGS',
upper = 10^3, lower = -10^3))
parametro <- res$par
verossimilhança <- res$value
cat('Parâmetro estimado:', parametro,'\n',
'Verossimilhança completa do modelo nulo:', verossimilhança, "\n",
'Graus de liberdade',length(dados)-ncol(cov)-1
)
}
cov_model(dados = am, n = 1, cov = cov_mtcars)
cov_model <- function(dados, n, cov){
vars <- as.matrix(cbind(rep(1, times = length(dados)), cov))
pars <- matrix(nrow = ncol(vars), 1)
fn_dados <- 0
ll <-  function(pars){
for(i in c(1:length(dados))){
fato <- log(factorial(n)/(factorial(n-dados[i])*factorial(dados[i])))
rep <- fato + dados[i]*vars[i,]%*%pars - n*log(1+ exp(vars[i,]%*%pars))
fn_dados <- fn_dados + rep
}
return(-fn_dados)
}
res <-optim(ll, par = rep(0, times = ncol(vars)), method = 'BFGS',
upper = 10^3, lower = -10^3)
parametro <- res$par
verossimilhança <- res$value
cat('Parâmetro estimado:', parametro,'\n',
'Verossimilhança completa do modelo nulo:', verossimilhança, "\n",
'Graus de liberdade',length(dados)-ncol(cov)-1
)
}
cov_model(dados = am, n = 1, cov = cov_mtcars)
cov_model <- function(dados, n, cov){
vars <- as.matrix(cbind(rep(1, times = length(dados)), cov))
pars <- matrix(nrow = ncol(vars), 1)
fn_dados <- 0
ll <-  function(pars){
for(i in c(1:length(dados))){
fato <- log(factorial(n)/(factorial(n-dados[i])*factorial(dados[i])))
rep <- fato + dados[i]*vars[i,]%*%pars - n*log(1+ exp(vars[i,]%*%pars))
fn_dados <- fn_dados + rep
}
return(-fn_dados)
}
res <-optim(ll, par = rep(0, times = ncol(vars)), method = 'BFGS')
parametro <- res$par
verossimilhança <- res$value
cat('Parâmetro estimado:', parametro,'\n',
'Verossimilhança completa do modelo nulo:', verossimilhança, "\n",
'Graus de liberdade',length(dados)-ncol(cov)-1
)
}
cov_model(dados = am, n = 1, cov = cov_mtcars)
cov_model <- function(dados, n, cov){
vars <- as.matrix(cbind(rep(1, times = length(dados)), cov))
pars <- matrix(nrow = ncol(vars), 1)
fn_dados <- 0
ll <-  function(pars){
for(i in c(1:length(dados))){
fato <- log(factorial(n)/(factorial(n-dados[i])*factorial(dados[i])))
rep <- fato + dados[i]*vars[i,]%*%pars - n*log(1+ exp(vars[i,]%*%pars))
fn_dados <- fn_dados + rep
}
return(-fn_dados)
}
if(ncol(vars)>1){
res <-optim(ll, par = rep(0, times = ncol(vars)), method = 'BFGS')}
else{res <-optim(ll, par = rep(0, times = ncol(vars)), method = 'Brent',
upper = 10^3, lower = -10^3)}
parametro <- res$par
verossimilhança <- res$value
cat('Parâmetro estimado:', parametro,'\n',
'Verossimilhança completa do modelo nulo:', verossimilhança, "\n",
'Graus de liberdade',length(dados)-ncol(cov)-1
)
}
cov_model(dados = am, n = 1, cov = cov_mtcars)
tabela <- mtcars
View(tabela)
cov_model(dados = am, n = 1, cov = cov_mtcars)
attach(mtcars)
cov_model(dados = am, n = 1, cov = cov_mtcars)
cov_model <- function(dados, n, cov){
vars <- as.matrix(cbind(rep(1, times = length(dados)), cov))
pars <- matrix(nrow = ncol(vars), 1)
fn_dados <- 0
if(is.integer(n) == TRUE){
ll <-  function(pars){
for(i in c(1:length(dados))){
fato <- log(factorial(n)/(factorial(n-dados[i])*factorial(dados[i])))
rep <- fato + dados[i]*vars[i,]%*%pars - n*log(1+ exp(vars[i,]%*%pars))
fn_dados <- fn_dados + rep
}
return(-fn_dados)
}}else{ ll <-  function(pars){
for(i in c(1:length(dados))){
fato <- log(factorial(n[i])/(factorial(n[i]-dados[i])*factorial(dados[i])))
rep <- fato + dados[i]*vars[i,]%*%pars - n[i]*log(1+ exp(vars[i,]%*%pars))
fn_dados <- fn_dados + rep
}
return(-fn_dados)
}
if(ncol(vars)>1){
res <-optim(ll, par = rep(0, times = ncol(vars)), method = 'BFGS')}
else{res <-optim(ll, par = rep(0, times = ncol(vars)), method = 'Brent',
upper = 10^3, lower = -10^3)}
parametro <- res$par
verossimilhança <- res$value
cat('Parâmetro estimado:', parametro,'\n',
'Verossimilhança completa do modelo nulo:', verossimilhança, "\n",
'Graus de liberdade',length(dados)-ncol(cov)-1
)
}
cov_model(dados = am, n = 1, cov = cov_mtcars)
test2 <- glm(am~cyl + hp + mpg, family = binomial())
logLik(test)
test2
cov_model <- function(dados, n, cov){
vars <- as.matrix(cbind(rep(1, times = length(dados)), cov))
pars <- matrix(nrow = ncol(vars), 1)
fn_dados <- 0
if(is.integer(n) == TRUE){
ll <-  function(pars){
for(i in c(1:length(dados))){
fato <- log(factorial(n)/(factorial(n-dados[i])*factorial(dados[i])))
rep <- fato + dados[i]*vars[i,]%*%pars - n*log(1+ exp(vars[i,]%*%pars))
fn_dados <- fn_dados + rep
}
return(-fn_dados)
}}else{ ll <-  function(pars){
for(i in c(1:length(dados))){
fato <- log(factorial(n[i])/(factorial(n[i]-dados[i])*factorial(dados[i])))
rep <- fato + dados[i]*vars[i,]%*%pars - n[i]*log(1+ exp(vars[i,]%*%pars))
fn_dados <- fn_dados + rep
}
return(-fn_dados)
}}
if(ncol(vars)>1){
res <-optim(ll, par = rep(0, times = ncol(vars)), method = 'BFGS')}
else{res <-optim(ll, par = rep(0, times = ncol(vars)), method = 'Brent',
upper = 10^3, lower = -10^3)}
parametro <- res$par
verossimilhança <- res$value
cat('Parâmetro estimado:', parametro,'\n',
'Verossimilhança completa do modelo nulo:', verossimilhança, "\n",
'Graus de liberdade',length(dados)-ncol(cov)-1
)
}
cov_model(dados = am, n = 1, cov = cov_mtcars)
cov_model(dados = am, n = 1, cov = cov_mtcars)
cov_model <- function(dados, n, cov){
vars <- as.matrix(cbind(rep(1, times = length(dados)), cov))
pars <- matrix(nrow = ncol(vars), 1)
fn_dados <- 0
if(is.integer(n) == TRUE){
ll <-  function(pars){
for(i in c(1:length(dados))){
fato <- log(factorial(n)/(factorial(n-dados[i])*factorial(dados[i])))
rep <- fato + dados[i]*vars[i,]%*%pars - n*log(1+ exp(vars[i,]%*%pars))
fn_dados <- fn_dados + rep
}
return(-fn_dados)
}}else{ll <-  function(pars){
for(i in c(1:length(dados))){
fato <- log(factorial(n[i])/(factorial(n[i]-dados[i])*factorial(dados[i])))
rep <- fato + dados[i]*vars[i,]%*%pars - n[i]*log(1+ exp(vars[i,]%*%pars))
fn_dados <- fn_dados + rep
}
return(-fn_dados)
}}
if(ncol(vars)>1){
res <-optim(ll, par = rep(0, times = ncol(vars)), method = 'BFGS')}else{
res <-optim(ll, par = rep(0, times = ncol(vars)), method = 'Brent',
upper = 10^3, lower = -10^3)}
parametro <- res$par
verossimilhança <- res$value
cat('Parâmetro estimado:', parametro,'\n',
'Verossimilhança completa do modelo nulo:', verossimilhança, "\n",
'Graus de liberdade',length(dados)-ncol(cov)-1
)
}
cov_model(dados = am, n = 1, cov = cov_mtcars)
a
a)
cov_model <- function(dados, n, cov){
vars <- as.matrix(cbind(rep(1, times = length(dados)), cov))
pars <- matrix(nrow = ncol(vars), 1)
fn_dados <- 0
if(is.integer(n) == TRUE){
ll <-  function(pars){
for(i in c(1:length(dados))){
fato <- log(factorial(n)/(factorial(n-dados[i])*factorial(dados[i])))
rep <- fato + dados[i]*vars[i,]%*%pars - n*log(1+ exp(vars[i,]%*%pars))
fn_dados <- fn_dados + rep
}
return(-fn_dados)
}}else{ll <-  function(pars){
for(i in c(1:length(dados))){
fato <- log(factorial(n[i])/(factorial(n[i]-dados[i])*factorial(dados[i])))
rep <- fato + dados[i]*vars[i,]%*%pars - n[i]*log(1+ exp(vars[i,]%*%pars))
fn_dados <- fn_dados + rep
}
return(-fn_dados)
}}
if(ncol(vars)>1){
res <-optim(ll, par = rep(0, times = ncol(vars)), method = 'BFGS')}else{
res <-optim(ll, par = rep(0, times = ncol(vars)), method = 'Brent',
upper = 10^3, lower = -10^3)}
parametro <- res$par
verossimilhança <- res$value
cat('Parâmetro estimado:', parametro,'\n',
'Verossimilhança completa do modelo nulo:', verossimilhança, "\n",
'Graus de liberdade',length(dados)-ncol(cov)-1
)
}
cov_model(dados = am, n = 1, cov = cov_mtcars)
is.integer(1)
is.double(1)
cov_model <- function(dados, n, cov){
vars <- as.matrix(cbind(rep(1, times = length(dados)), cov))
pars <- matrix(nrow = ncol(vars), 1)
fn_dados <- 0
if(is.double(n) == TRUE){
ll <-  function(pars){
for(i in c(1:length(dados))){
fato <- log(factorial(n)/(factorial(n-dados[i])*factorial(dados[i])))
rep <- fato + dados[i]*vars[i,]%*%pars - n*log(1+ exp(vars[i,]%*%pars))
fn_dados <- fn_dados + rep
}
return(-fn_dados)
}}else{ll <-  function(pars){
for(i in c(1:length(dados))){
fato <- log(factorial(n[i])/(factorial(n[i]-dados[i])*factorial(dados[i])))
rep <- fato + dados[i]*vars[i,]%*%pars - n[i]*log(1+ exp(vars[i,]%*%pars))
fn_dados <- fn_dados + rep
}
return(-fn_dados)
}}
if(ncol(vars)>1){
res <-optim(ll, par = rep(0, times = ncol(vars)), method = 'BFGS')}else{
res <-optim(ll, par = rep(0, times = ncol(vars)), method = 'Brent',
upper = 10^3, lower = -10^3)}
parametro <- res$par
verossimilhança <- res$value
cat('Parâmetro estimado:', parametro,'\n',
'Verossimilhança completa do modelo nulo:', verossimilhança, "\n",
'Graus de liberdade',length(dados)-ncol(cov)-1
)
}
cov_model(dados = am, n = 1, cov = cov_mtcars)
dados1 <- rbinom(n = 40, size = 5, prob = 0.1)
dados2 <- rbinom(n = 40, size = 8, prob = 0.1)
dados1 <- rbinom(n = 40, size = 5, prob = 0.1)
dados2 <- rbinom(n = 40, size = 8, prob = 0.1)
n <- c(rep(5,40),rep(8.40))
cov_model(rbind(dados1, dados2), n2, cov = NULL)
n2 <- c(rep(5,40),rep(8.40))
cov_model(rbind(dados1, dados2), n2, cov = NULL)
cov_model(rbind(dados1, dados2), n2, cov = 1)
cov_model(dados = am, n = 1, cov = cov_mtcars)
test2
test2 <- glm(am~cyl + hp + mpg, family = binomial())
test2
rbind(dados1, dados2)
cbind(dados1, dados2)
c(dados1, dados2)
cov_model(c(dados1, dados2), n2, cov = 1)
cov_model(c(dados1, dados2), n2, cov = cov_mtcars)
dim(cov_m)
dim(cov_mtcars)
dados1 <- rbinom(n = 16, size = 5, prob = 0.1)
dados2 <- rbinom(n = 16, size = 8, prob = 0.1)
n2 <- c(rep(5,40),rep(8.40))
cov_model(c(dados1, dados2), n2, cov = cov_mtcars)
dim(cov_mtcars)
dados1 <- rbinom(n = 16, size = 5, prob = 0.1)
dados2 <- rbinom(n = 16, size = 8, prob = 0.1)
n2 <- c(rep(5,16),rep(8,16))
cov_model(c(dados1, dados2), n2, cov = cov_mtcars)
dados1 <- rbinom(n = 16, size = 5, prob = 0.1)
dados2 <- rbinom(n = 16, size = 8, prob = 0.1)
n2 <- c(rep(5,16),rep(8,16))
cov_model(c(dados1, dados2), n2, cov = cov_mtcars)
n2
c(dados1, dados2)
cov_mtcars
cov_mtcars[,1]
n2
cov_model(c(dados1, dados2), n2, cov = cov_mtcars)
is.double(n2)
is.vector(n2)
cov_model <- function(dados, n, cov){
vars <- as.matrix(cbind(rep(1, times = length(dados)), cov))
pars <- matrix(nrow = ncol(vars), 1)
fn_dados <- 0
if(is.vector(n) == FALSE){
ll <-  function(pars){
for(i in c(1:length(dados))){
fato <- log(factorial(n)/(factorial(n-dados[i])*factorial(dados[i])))
rep <- fato + dados[i]*vars[i,]%*%pars - n*log(1+ exp(vars[i,]%*%pars))
fn_dados <- fn_dados + rep
}
return(-fn_dados)
}}else{ll <-  function(pars){
for(i in c(1:length(dados))){
fato <- log(factorial(n[i])/(factorial(n[i]-dados[i])*factorial(dados[i])))
rep <- fato + dados[i]*vars[i,]%*%pars - n[i]*log(1+ exp(vars[i,]%*%pars))
fn_dados <- fn_dados + rep
}
return(-fn_dados)
}}
if(ncol(vars)>1){
res <-optim(ll, par = rep(0, times = ncol(vars)), method = 'BFGS')}else{
res <-optim(ll, par = rep(0, times = ncol(vars)), method = 'Brent',
upper = 10^3, lower = -10^3)}
parametro <- res$par
verossimilhança <- res$value
cat('Parâmetro estimado:', parametro,'\n',
'Verossimilhança completa do modelo nulo:', verossimilhança, "\n",
'Graus de liberdade',length(dados)-ncol(cov)-1
)
}
cov_model(dados = am, n = 1, cov = cov_mtcars)
is.vector(1)
cov_model <- function(dados, n, cov, grupos){
vars <- as.matrix(cbind(rep(1, times = length(dados)), cov))
pars <- matrix(nrow = ncol(vars), 1)
fn_dados <- 0
if(grupos == F){
ll <-  function(pars){
for(i in c(1:length(dados))){
fato <- log(factorial(n)/(factorial(n-dados[i])*factorial(dados[i])))
rep <- fato + dados[i]*vars[i,]%*%pars - n*log(1+ exp(vars[i,]%*%pars))
fn_dados <- fn_dados + rep
}
return(-fn_dados)
}}else{ll <-  function(pars){
for(i in c(1:length(dados))){
fato <- log(factorial(n[i])/(factorial(n[i]-dados[i])*factorial(dados[i])))
rep <- fato + dados[i]*vars[i,]%*%pars - n[i]*log(1+ exp(vars[i,]%*%pars))
fn_dados <- fn_dados + rep
}
return(-fn_dados)
}}
if(ncol(vars)>1){
res <-optim(ll, par = rep(0, times = ncol(vars)), method = 'BFGS')}else{
res <-optim(ll, par = rep(0, times = ncol(vars)), method = 'Brent',
upper = 10^3, lower = -10^3)}
parametro <- res$par
verossimilhança <- res$value
cat('Parâmetro estimado:', parametro,'\n',
'Verossimilhança completa do modelo nulo:', verossimilhança, "\n",
'Graus de liberdade',length(dados)-ncol(cov)-1
)
}
cov_model(dados = am, n = 1, cov = cov_mtcars, grupos == F)
cov_model(dados = am, n = 1, cov = cov_mtcars, grupos = F)
cov_model(c(dados1, dados2), n2, cov = cov_mtcars, grupos = T)
dados_teste <- c(rbinom(n = 16, size = 5, prob = 0.1),rbinom(n = 16, size = 8, prob = 0.1))
n2 <- c(rep(5,16),rep(8,16))
cov_model(dados_teste, n2, cov = cov_mtcars, grupos = T)
glm(dados_teste, dados_teste~cov_mtcars)
glm(dados_teste, dados_teste~cov_mtcars, family = binomial())
glm(cbind(dados_teste, n2-dados_teste), dados_teste~cov_mtcars, family = binomial())
glm(cbind(dados_teste, n2-dados_teste), ~cov_mtcars, family = binomial())
glm(cbind(dados_teste, n2-dados_teste) ~cov_mtcars, family = binomial())
cov_model(dados_teste, n2, cov = cov_mtcars, grupos = T)
