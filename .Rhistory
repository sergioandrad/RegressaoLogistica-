return(-fn_dados)
}}
if(ncol(vars)>1){
res <-optim(ll, par = rep(0, times = ncol(vars)), method = 'BFGS')}else{
res <-optim(ll, par = rep(0, times = ncol(vars)), method = 'Brent',
upper = 10^3, lower = -10^3)}
parametro <- res$par
verossimilhança <- res$value
nulo <- null_model(dados, n)
cat('\n','Parâmetro estimado:', parametro,'\n',
'Verossimilhança completa do modelo nulo:', verossimilhança, "\n",
'Graus de liberdade',length(dados)-ncol(cov)-1,'\n', 'Dif. de deviance',
nulo[,2]-verossimilhança
)
}
cov_model(dados = am, n = 1, cov = cov_mtcars, grupos = F)
cov_model <- function(dados, n, cov, grupos){
vars <- as.matrix(cbind(rep(1, times = length(dados)), cov))
pars <- matrix(nrow = ncol(vars), 1)
fn_dados <- 0
if(grupos == F){
ll <-  function(pars){
for(i in c(1:length(dados))){
fato <- log(factorial(n)/(factorial(n-dados[i])*factorial(dados[i])))
rep <- fato + dados[i]*vars[i,]%*%pars - n*log(1+ exp(vars[i,]%*%pars))
fn_dados <- fn_dados + rep
}
return(-fn_dados)
}}else{ll <-  function(pars){
for(i in c(1:length(dados))){
fato <- log(factorial(n[i])/(factorial(n[i]-dados[i])*factorial(dados[i])))
rep <- fato + dados[i]*vars[i,]%*%pars - n[i]*log(1+ exp(vars[i,]%*%pars))
fn_dados <- fn_dados + rep
}
return(-fn_dados)
}}
if(ncol(vars)>1){
res <-optim(ll, par = rep(0, times = ncol(vars)), method = 'BFGS')}else{
res <-optim(ll, par = rep(0, times = ncol(vars)), method = 'Brent',
upper = 10^3, lower = -10^3)}
parametro <- res$par
verossimilhança <- res$value
nulo <- null_model(dados, n)
cat('\n','Parâmetro estimado:', parametro,'\n',
'Verossimilhança completa do modelo ajustado:', verossimilhança, "\n",
'Graus de liberdade',length(dados)-ncol(cov)-1,'\n', 'Dif. de deviance',
nulo[,2]-verossimilhança
)
}
cov_model(dados = am, n = 1, cov = cov_mtcars, grupos = F)
null_model <- function(dados, n){
soma <- 0
cov <- rep(1, times = length(dados))
ll <-  function(beta){
fato <- log(factorial(n)/(factorial(n-dados)*factorial(dados)))
fn_dados <- fato + dados*cov*beta - n*log(1+ exp(cov*beta))
soma <- sum(fn_dados)
return(-soma)
}
res <- suppressWarnings(optim(ll, par = c(0), method = 'Brent', upper = 10^8, lower = -10^8))
parametro_nulo <- res$par
verossimilhança_nulo <- res$value
cat(paste('Parâmetro estimado do modelo nulo:',as.character(round(parametro_nulo, digits =3)),'\n',
'Verossimilhança completa do modelo nulo:',as.character(round(res$value, digits =3))), "\n",
'Graus de liberdade',length(dados)-1  )
return(c(parametro_nulo, verossimilhança_nulo)
)
}
null_model(dados, n = 5)
null_model <- function(dados, n){
soma <- 0
cov <- rep(1, times = length(dados))
ll <-  function(beta){
fato <- log(factorial(n)/(factorial(n-dados)*factorial(dados)))
fn_dados <- fato + dados*cov*beta - n*log(1+ exp(cov*beta))
soma <- sum(fn_dados)
return(-soma)
}
res <- suppressWarnings(optim(ll, par = c(0), method = 'Brent', upper = 10^8, lower = -10^8))
parametro_nulo <- res$par
verossimilhança_nulo <- res$value
cat(paste('Parâmetro estimado do modelo nulo:',as.character(round(parametro_nulo, digits =3)),'\n',
'Verossimilhança completa do modelo nulo:',as.character(round(res$value, digits =3))), "\n",
'Graus de liberdade',length(dados)-1)
return(c(parametro_nulo, verossimilhança_nulo))
}
null_model(dados, n = 5)
dados <- rbinom(n = 40, size = 5, prob = 0.1)
null_model(dados, n = 5)
set.seed(100)
dados <- rbinom(n = 40, size = 5, prob = 0.1)
null_model <- function(dados, n){
soma <- 0
cov <- rep(1, times = length(dados))
ll <-  function(beta){
fato <- log(factorial(n)/(factorial(n-dados)*factorial(dados)))
fn_dados <- fato + dados*cov*beta - n*log(1+ exp(cov*beta))
soma <- sum(fn_dados)
return(-soma)
}
res <- suppressWarnings(optim(ll, par = c(0), method = 'Brent', upper = 10^8, lower = -10^8))
parametro_nulo <- res$par
verossimilhança_nulo <- res$value
cat(paste('Parâmetro estimado do modelo nulo:',as.character(round(parametro_nulo, digits =3)),'\n',
'Verossimilhança completa do modelo nulo:',as.character(round(res$value, digits =3))), "\n",
'Graus de liberdade',length(dados)-1)
return(c(parametro_nulo, verossimilhança_nulo))
}
null_model(dados, n = 5)
null_model <- function(dados, n){
soma <- 0
cov <- rep(1, times = length(dados))
ll <-  function(beta){
fato <- log(factorial(n)/(factorial(n-dados)*factorial(dados)))
fn_dados <- fato + dados*cov*beta - n*log(1+ exp(cov*beta))
soma <- sum(fn_dados)
return(-soma)
}
res <- suppressWarnings(optim(ll, par = c(0), method = 'Brent', upper = 10^8, lower = -10^8))
parametro_nulo <- res$par
verossimilhança_nulo <- res$value
cat(paste('Parâmetro estimado do modelo nulo:',as.character(round(parametro_nulo, digits =3)),'\n',
'Verossimilhança completa do modelo nulo:',as.character(round(res$value, digits =3))), "\n",
'Graus de liberdade',length(dados)-1)
}
null_model(dados, n = 5)
fail <- n - dados
test <-glm(formula = cbind(dados, fail) ~ 1, family= binomial())
test
logLik(test)
fail <- n - dados
fail <- 5 - dados
test <-glm(formula = cbind(dados, fail) ~ 1, family= binomial())
test
logLik(test)
null_model(dados, n = 5)
test <-glm(formula = cbind(dados, 5 - dados) ~ 1, family= binomial())
test
logLik(test)
cov_model <- function(dados, n, cov, grupos){
vars <- as.matrix(cbind(rep(1, times = length(dados)), cov))
pars <- matrix(nrow = ncol(vars), 1)
fn_dados <- 0
if(grupos == F){
ll <-  function(pars){
for(i in c(1:length(dados))){
fato <- log(factorial(n)/(factorial(n-dados[i])*factorial(dados[i])))
rep <- fato + dados[i]*vars[i,]%*%pars - n*log(1+ exp(vars[i,]%*%pars))
fn_dados <- fn_dados + rep
}
return(-fn_dados)
}}else{ll <-  function(pars){
for(i in c(1:length(dados))){
fato <- log(factorial(n[i])/(factorial(n[i]-dados[i])*factorial(dados[i])))
rep <- fato + dados[i]*vars[i,]%*%pars - n[i]*log(1+ exp(vars[i,]%*%pars))
fn_dados <- fn_dados + rep
}
return(-fn_dados)
}}
if(ncol(vars)>1){
res <-optim(ll, par = rep(0, times = ncol(vars)), method = 'BFGS')}else{
res <-optim(ll, par = rep(0, times = ncol(vars)), method = 'Brent',
upper = 10^3, lower = -10^3)}
parametro <- res$par
verossimilhança <- res$value
cat('Modelo nulo:')
nulo <- null_model(dados, n)
cat('\n','Parâmetro estimado:', parametro,'\n',
'Verossimilhança completa do modelo ajustado:', verossimilhança, "\n",
'Graus de liberdade',length(dados)-ncol(cov)-1,'\n', 'Dif. de deviance',
nulo[,2]-verossimilhança
)
}
cov_model(dados = am, n = 1, cov = cov_mtcars, grupos = F)
cov_model <- function(dados, n, cov, grupos){
vars <- as.matrix(cbind(rep(1, times = length(dados)), cov))
pars <- matrix(nrow = ncol(vars), 1)
fn_dados <- 0
if(grupos == F){
ll <-  function(pars){
for(i in c(1:length(dados))){
fato <- log(factorial(n)/(factorial(n-dados[i])*factorial(dados[i])))
rep <- fato + dados[i]*vars[i,]%*%pars - n*log(1+ exp(vars[i,]%*%pars))
fn_dados <- fn_dados + rep
}
return(-fn_dados)
}}else{ll <-  function(pars){
for(i in c(1:length(dados))){
fato <- log(factorial(n[i])/(factorial(n[i]-dados[i])*factorial(dados[i])))
rep <- fato + dados[i]*vars[i,]%*%pars - n[i]*log(1+ exp(vars[i,]%*%pars))
fn_dados <- fn_dados + rep
}
return(-fn_dados)
}}
if(ncol(vars)>1){
res <-optim(ll, par = rep(0, times = ncol(vars)), method = 'BFGS')}else{
res <-optim(ll, par = rep(0, times = ncol(vars)), method = 'Brent',
upper = 10^3, lower = -10^3)}
parametro <- res$par
verossimilhança <- res$value
cat('Parâmetro estimado:', parametro,'\n',
'Verossimilhança completa do modelo ajustado:', verossimilhança, "\n",
'Graus de liberdade',length(dados)-ncol(cov)-1,'\n', 'Dif. de deviance',
nulo[,2]-verossimilhança, '\n', null_model(dados, n)
)
}
cov_model(dados = am, n = 1, cov = cov_mtcars, grupos = F)
cov_model <- function(dados, n, cov, grupos){
vars <- as.matrix(cbind(rep(1, times = length(dados)), cov))
pars <- matrix(nrow = ncol(vars), 1)
fn_dados <- 0
if(grupos == F){
ll <-  function(pars){
for(i in c(1:length(dados))){
fato <- log(factorial(n)/(factorial(n-dados[i])*factorial(dados[i])))
rep <- fato + dados[i]*vars[i,]%*%pars - n*log(1+ exp(vars[i,]%*%pars))
fn_dados <- fn_dados + rep
}
return(-fn_dados)
}}else{ll <-  function(pars){
for(i in c(1:length(dados))){
fato <- log(factorial(n[i])/(factorial(n[i]-dados[i])*factorial(dados[i])))
rep <- fato + dados[i]*vars[i,]%*%pars - n[i]*log(1+ exp(vars[i,]%*%pars))
fn_dados <- fn_dados + rep
}
return(-fn_dados)
}}
if(ncol(vars)>1){
res <-optim(ll, par = rep(0, times = ncol(vars)), method = 'BFGS')}else{
res <-optim(ll, par = rep(0, times = ncol(vars)), method = 'Brent',
upper = 10^3, lower = -10^3)}
parametro <- res$par
verossimilhança <- res$value
cat('Parâmetro estimado:', parametro,'\n',
'Verossimilhança completa do modelo ajustado:', verossimilhança, "\n",
'Graus de liberdade',length(dados)-ncol(cov)-1,'\n', null_model(dados, n)
)
}
cov_model(dados = am, n = 1, cov = cov_mtcars, grupos = F)
cov_model <- function(dados, n, cov, grupos){
vars <- as.matrix(cbind(rep(1, times = length(dados)), cov))
pars <- matrix(nrow = ncol(vars), 1)
fn_dados <- 0
if(grupos == F){
ll <-  function(pars){
for(i in c(1:length(dados))){
fato <- log(factorial(n)/(factorial(n-dados[i])*factorial(dados[i])))
rep <- fato + dados[i]*vars[i,]%*%pars - n*log(1+ exp(vars[i,]%*%pars))
fn_dados <- fn_dados + rep
}
return(-fn_dados)
}}else{ll <-  function(pars){
for(i in c(1:length(dados))){
fato <- log(factorial(n[i])/(factorial(n[i]-dados[i])*factorial(dados[i])))
rep <- fato + dados[i]*vars[i,]%*%pars - n[i]*log(1+ exp(vars[i,]%*%pars))
fn_dados <- fn_dados + rep
}
return(-fn_dados)
}}
if(ncol(vars)>1){
res <-optim(ll, par = rep(0, times = ncol(vars)), method = 'BFGS')}else{
res <-optim(ll, par = rep(0, times = ncol(vars)), method = 'Brent',
upper = 10^3, lower = -10^3)}
parametro <- res$par
verossimilhança <- res$value
cat('Parâmetro estimado:', parametro,'\n',
'Verossimilhança completa do modelo ajustado:', verossimilhança, "\n",
'Graus de liberdade',length(dados)-ncol(cov)-1    )
null_model(dados, n)
}
cov_model(dados = am, n = 1, cov = cov_mtcars, grupos = F)
cov_model <- function(dados, n, cov, grupos){
vars <- as.matrix(cbind(rep(1, times = length(dados)), cov))
pars <- matrix(nrow = ncol(vars), 1)
fn_dados <- 0
if(grupos == F){
ll <-  function(pars){
for(i in c(1:length(dados))){
fato <- log(factorial(n)/(factorial(n-dados[i])*factorial(dados[i])))
rep <- fato + dados[i]*vars[i,]%*%pars - n*log(1+ exp(vars[i,]%*%pars))
fn_dados <- fn_dados + rep
}
return(-fn_dados)
}}else{ll <-  function(pars){
for(i in c(1:length(dados))){
fato <- log(factorial(n[i])/(factorial(n[i]-dados[i])*factorial(dados[i])))
rep <- fato + dados[i]*vars[i,]%*%pars - n[i]*log(1+ exp(vars[i,]%*%pars))
fn_dados <- fn_dados + rep
}
return(-fn_dados)
}}
if(ncol(vars)>1){
res <-optim(ll, par = rep(0, times = ncol(vars)), method = 'BFGS')}else{
res <-optim(ll, par = rep(0, times = ncol(vars)), method = 'Brent',
upper = 10^3, lower = -10^3)}
parametro <- res$par
verossimilhança <- res$value
cat('Parâmetro estimado:', parametro,'\n',
'Verossimilhança completa do modelo ajustado:', verossimilhança, "\n",
'Graus de liberdade',length(dados)-ncol(cov)-1    )
cat('\n')
null_model(dados, n)
}
cov_model(dados = am, n = 1, cov = cov_mtcars, grupos = F)
cov_model <- function(dados, n, cov, grupos){
vars <- as.matrix(cbind(rep(1, times = length(dados)), cov))
pars <- matrix(nrow = ncol(vars), 1)
fn_dados <- 0
if(grupos == F){
ll <-  function(pars){
for(i in c(1:length(dados))){
fato <- log(factorial(n)/(factorial(n-dados[i])*factorial(dados[i])))
rep <- fato + dados[i]*vars[i,]%*%pars - n*log(1+ exp(vars[i,]%*%pars))
fn_dados <- fn_dados + rep
}
return(-fn_dados)
}}else{ll <-  function(pars){
for(i in c(1:length(dados))){
fato <- log(factorial(n[i])/(factorial(n[i]-dados[i])*factorial(dados[i])))
rep <- fato + dados[i]*vars[i,]%*%pars - n[i]*log(1+ exp(vars[i,]%*%pars))
fn_dados <- fn_dados + rep
}
return(-fn_dados)
}}
if(ncol(vars)>1){
res <-optim(ll, par = rep(0, times = ncol(vars)), method = 'BFGS')}else{
res <-optim(ll, par = rep(0, times = ncol(vars)), method = 'Brent',
upper = 10^3, lower = -10^3)}
parametro <- res$par
verossimilhança <- res$value
cat('Parâmetro estimado:', parametro,'\n',
'Verossimilhança completa do modelo ajustado:', verossimilhança, "\n",
'Graus de liberdade',length(dados)-ncol(cov)-1    )
cat('\n')
null_model(dados, n)
}
cov_model(dados = am, n = 1, cov = cov_mtcars, grupos = F)
cov_model <- function(dados, n, cov, grupos){
vars <- as.matrix(cbind(rep(1, times = length(dados)), cov))
pars <- matrix(nrow = ncol(vars), 1)
fn_dados <- 0
if(grupos == F){
ll <-  function(pars){
for(i in c(1:length(dados))){
fato <- log(factorial(n)/(factorial(n-dados[i])*factorial(dados[i])))
rep <- fato + dados[i]*vars[i,]%*%pars - n*log(1+ exp(vars[i,]%*%pars))
fn_dados <- fn_dados + rep
}
return(-fn_dados)
}}else{ll <-  function(pars){
for(i in c(1:length(dados))){
fato <- log(factorial(n[i])/(factorial(n[i]-dados[i])*factorial(dados[i])))
rep <- fato + dados[i]*vars[i,]%*%pars - n[i]*log(1+ exp(vars[i,]%*%pars))
fn_dados <- fn_dados + rep
}
return(-fn_dados)
}}
if(ncol(vars)>1){
res <-optim(ll, par = rep(0, times = ncol(vars)), method = 'BFGS')}else{
res <-optim(ll, par = rep(0, times = ncol(vars)), method = 'Brent',
upper = 10^3, lower = -10^3)}
parametro <- res$par
verossimilhança <- res$value
cat('Parâmetro estimado:', parametro,'\n',
'Verossimilhança completa do modelo ajustado:', verossimilhança, "\n",
'Graus de liberdade',length(dados)-ncol(cov)-1    )
cat('\n')
null_model(dados, n)
}
cov_model(dados = am, n = 1, cov = cov_mtcars, grupos = F)
2(21.615 - 9.17363)
2*(21.615 - 9.17363)
-
test2 <- glm(am~cyl + hp + mpg, family = binomial())
test2 <- glm(am~cyl + hp + mpg, family = binomial())
test2
2*(exp(21.615) - exp(9.17363))
2*(exp(21.615) - exp(9.17363))
2*(exp(21.615) - exp(9.17363))
2*(exp(-21.615) - exp(-9.17363))
logLik(test)
2*(-exp(-21.615) + exp(9.17363))
-2*(-exp(-21.615) + exp(9.17363))
2*(-exp(-21.615) + exp(9.17363))
-2*(exp(21.615) - exp(9.17363))
cov_model(dados = am, n = 1, cov = cov_mtcars, grupos = F)
logLik(test)
exp(9)
test2
logLik(test2)
cov_model(dados = am, n = 1, cov = cov_mtcars, grupos = F)
logLik(test2)
cov_model <- function(dados, n, cov, grupos){
vars <- as.matrix(cbind(rep(1, times = length(dados)), cov))
pars <- matrix(nrow = ncol(vars), 1)
fn_dados <- 0
if(grupos == F){
ll <-  function(pars){
for(i in c(1:length(dados))){
fato <- log(factorial(n)/(factorial(n-dados[i])*factorial(dados[i])))
rep <- fato + dados[i]*vars[i,]%*%pars - n*log(1+ exp(vars[i,]%*%pars))
fn_dados <- fn_dados + rep
}
return(-fn_dados)
}}else{ll <-  function(pars){
for(i in c(1:length(dados))){
fato <- log(factorial(n[i])/(factorial(n[i]-dados[i])*factorial(dados[i])))
rep <- fato + dados[i]*vars[i,]%*%pars - n[i]*log(1+ exp(vars[i,]%*%pars))
fn_dados <- fn_dados + rep
}
return(-fn_dados)
}}
if(ncol(vars)>1){
res <-optim(ll, par = rep(0, times = ncol(vars)), method = 'BFGS')}else{
res <-optim(ll, par = rep(0, times = ncol(vars)), method = 'Brent',
upper = 10^3, lower = -10^3)}
parametro <- res$par
verossimilhança <- res$value
cat('Parâmetro estimado:', parametro,'\n',
'Verossimilhança completa do modelo ajustado:', -verossimilhança, "\n",
'Graus de liberdade',length(dados)-ncol(cov)-1    )
cat('\n')
null_model(dados, n)
}
cov_model(dados = am, n = 1, cov = cov_mtcars, grupos = F)
logLik(test2)
test2
logLik(test2)
-2*test2
-2*test2$deviance
-2*logLik(test2)
null_model(dados = am, n = 1)
glm(am~1, binomial())
-2*(logLik(test2)-logLik(nulo))
nulo <- glm(am~1, binomial())
attach(mtcars)
cov_model(dados = am, n = 1, cov = cov_mtcars, grupos = F)
test2 <- glm(am~cyl + hp + mpg, family = binomial())
null_model(dados = am, n = 1)
nulo <- glm(am~1, binomial())
-2*(logLik(test2)-logLik(nulo))
-2*(logLik(nulo)- logLik(test2))
test2
43-18
43.23-18.35
-2*(logLik(nulo)- logLik(test2))
round(-2*(logLik(nulo)- logLik(test2)), digits =2)
-2*logLik(test2)
-2*logLik(nulo)
set.seed(100)
dados <- rbinom(n = 40, size = 5, prob = 0.1)
null_model <- function(dados, n){
soma <- 0
cov <- rep(1, times = length(dados))
ll <-  function(beta){
fato <- log(factorial(n)/(factorial(n-dados)*factorial(dados)))
fn_dados <- fato + dados*cov*beta - n*log(1+ exp(cov*beta))
soma <- sum(fn_dados)
return(-soma)
}
res <- suppressWarnings(optim(ll, par = c(0), method = 'Brent', upper = 10^8, lower = -10^8))
parametro_nulo <- res$par
verossimilhança_nulo <- res$value
cat(paste('Parâmetro estimado do modelo nulo:',as.character(round(parametro_nulo, digits =3)),'\n',
'Verossimilhança completa do modelo nulo:',as.character(round(res$value, digits =3))), "\n",
'Graus de liberdade',length(dados)-1)
}
null_model(dados, n = 5)
test <-glm(formula = cbind(dados, 5 - dados) ~ 1, family= binomial())
test
logLik(test)
summary(mtcars)
attach(mtcars)
cov_model <- function(dados, n, cov, grupos){
vars <- as.matrix(cbind(rep(1, times = length(dados)), cov))
pars <- matrix(nrow = ncol(vars), 1)
fn_dados <- 0
if(grupos == F){
ll <-  function(pars){
for(i in c(1:length(dados))){
fato <- log(factorial(n)/(factorial(n-dados[i])*factorial(dados[i])))
rep <- fato + dados[i]*vars[i,]%*%pars - n*log(1+ exp(vars[i,]%*%pars))
fn_dados <- fn_dados + rep
}
return(-fn_dados)
}}else{ll <-  function(pars){
for(i in c(1:length(dados))){
fato <- log(factorial(n[i])/(factorial(n[i]-dados[i])*factorial(dados[i])))
rep <- fato + dados[i]*vars[i,]%*%pars - n[i]*log(1+ exp(vars[i,]%*%pars))
fn_dados <- fn_dados + rep
}
return(-fn_dados)
}}
if(ncol(vars)>1){
res <-optim(ll, par = rep(0, times = ncol(vars)), method = 'BFGS')}else{
res <-optim(ll, par = rep(0, times = ncol(vars)), method = 'Brent',
upper = 10^3, lower = -10^3)}
parametro <- res$par
verossimilhança <- res$value
cat('Parâmetro estimado:', parametro,'\n',
'Verossimilhança completa do modelo ajustado:', -verossimilhança, "\n",
'Graus de liberdade',length(dados)-ncol(cov)-1    )
cat('\n')
null_model(dados, n)
}
cov_model(dados = am, n = 1, cov = cov_mtcars, grupos = F)
test2 <- glm(am~cyl + hp + mpg, family = binomial())
null_model(dados = am, n = 1)
test2
null_model(dados = am, n = 1)
nulo <- glm(am~1, binomial())
nulo
