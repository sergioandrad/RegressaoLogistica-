}
cov_model(data = am, n = 1, cov = cov_mtcars)
fn_dados
cov_model <- function(data, n, cov){
dados <- data
vars <- as.matrix(cbind(rep(1, times = length(dados)), cov))
pars <- matrix(nrow = ncol(vars), 1)
ll <-  function(pars){
fn_dados <- 0
for(i in c(1:length(dados))){
fato <- log(factorial(n)/(factorial(n-dados[i])*factorial(dados[i])))
fn_dados[i] <- fato + dados*vars[i,]%*%pars - n*log(1+ exp(vars[i,]%*%pars))
}
return(-sum(fn_dados))
}
res <- suppressWarnings(optim(ll, par = c(rep(0, times = ncol(cov)+1)), method = 'BFGS',
upper = 10^3, lower = -10^3))
parametro <- res$par
verossimilhança <- res$value
cat('Parâmetro estimado:', parametro,'\n',
'Verossimilhança completa do modelo nulo:', verossimilhança, "\n",
'Graus de liberdade',length(dados)-ncol(cov)-1
)
}
cov_model(data = am, n = 1, cov = cov_mtcars)
fn_dados
cov_model <- function(data, n, cov){
dados <- data
vars <- as.matrix(cbind(rep(1, times = length(dados)), cov))
pars <- matrix(nrow = ncol(vars), 1)
ll <-  function(pars){
fn_dados <- 0
for(i in c(1:length(dados))){
fato <- log(factorial(n)/(factorial(n-dados[i])*factorial(dados[i])))
rep <- fato + dados*vars[i,]%*%pars - n*log(1+ exp(vars[i,]%*%pars))
fn_dados <- fn_dados + rep
}
return(-fn_dados)
}
res <- suppressWarnings(optim(ll, par = c(rep(0, times = ncol(cov)+1)), method = 'BFGS',
upper = 10^3, lower = -10^3))
parametro <- res$par
verossimilhança <- res$value
cat('Parâmetro estimado:', parametro,'\n',
'Verossimilhança completa do modelo nulo:', verossimilhança, "\n",
'Graus de liberdade',length(dados)-ncol(cov)-1
)
}
cov_model(data = am, n = 1, cov = cov_mtcars)
vars[1,]
cov_model <- function(data, n, cov){
dados <- data
vars <- as.matrix(cbind(rep(1, times = length(dados)), cov))
pars <- matrix(nrow = ncol(vars), 1)
ll <-  function(pars){
fn_dados <- 0
for(i in c(1:length(dados))){
fato <- log(factorial(n)/(factorial(n-dados[i])*factorial(dados[i])))
rep <- fato + dados*vars[i,]%*%pars - n*log(1+ exp(vars[i,]%*%pars))
fn_dados <- fn_dados + rep
}
return(-sum(fn_dados))
}
res <- suppressWarnings(optim(ll, par = c(rep(0, times = ncol(cov)+1)), method = 'BFGS',
upper = 10^3, lower = -10^3))
parametro <- res$par
verossimilhança <- res$value
cat('Parâmetro estimado:', parametro,'\n',
'Verossimilhança completa do modelo nulo:', verossimilhança, "\n",
'Graus de liberdade',length(dados)-ncol(cov)-1
)
}
cov_model(data = am, n = 1, cov = cov_mtcars)
glm(am~cyl + hp + mpg)
cov_model <- function(data, n, cov){
dados <- data
vars <- as.matrix(cbind(rep(1, times = length(dados)), cov))
pars <- matrix(nrow = ncol(vars), 1)
ll <-  function(pars){
fn_dados <- 0
for(i in c(1:length(dados))){
fato <- log(factorial(n)/(factorial(n-dados[i])*factorial(dados[i])))
rep <- fato + dados[i]*vars[i,]%*%pars - n*log(1+ exp(vars[i,]%*%pars))
fn_dados <- fn_dados + rep
}
return(-sum(fn_dados))
}
res <- suppressWarnings(optim(ll, par = c(rep(0, times = ncol(cov)+1)), method = 'BFGS',
upper = 10^3, lower = -10^3))
parametro <- res$par
verossimilhança <- res$value
cat('Parâmetro estimado:', parametro,'\n',
'Verossimilhança completa do modelo nulo:', verossimilhança, "\n",
'Graus de liberdade',length(dados)-ncol(cov)-1
)
}
cov_model(data = am, n = 1, cov = cov_mtcars)
glm(am~cyl + hp + mpg)
cov_model <- function(data, n, cov){
dados <- data
vars <- as.matrix(cbind(rep(1, times = length(dados)), cov))
pars <- matrix(nrow = ncol(vars), 1)
ll <-  function(pars){
fn_dados <- 0
for(i in c(1:length(dados))){
fato <- log(factorial(n)/(factorial(n-dados[i])*factorial(dados[i])))
rep <- fato + dados[i]*vars[i,]%*%pars - n*log(1+ exp(vars[i,]%*%pars))
fn_dados <- fn_dados + rep
}
return(-fn_dados)
}
res <- suppressWarnings(optim(ll, par = c(rep(0, times = ncol(cov)+1)), method = 'BFGS',
upper = 10^3, lower = -10^3))
parametro <- res$par
verossimilhança <- res$value
cat('Parâmetro estimado:', parametro,'\n',
'Verossimilhança completa do modelo nulo:', verossimilhança, "\n",
'Graus de liberdade',length(dados)-ncol(cov)-1
)
}
cov_model(data = am, n = 1, cov = cov_mtcars)
glm(am~cyl + hp + mpg)
cov_model <- function(data, n, cov){
dados <- data
vars <- as.matrix(cbind(rep(1, times = length(dados)), cov))
pars <- matrix(nrow = ncol(vars), 1)
ll <-  function(pars){
fn_dados <- 0
for(i in c(1:length(dados))){
fato <- log(factorial(n)/(factorial(n-dados[i])*factorial(dados[i])))
rep <- fato + dados[i]*vars[i,]%*%pars - n*log(1+ exp(vars[i,]%*%pars))
fn_dados <- fn_dados + rep
}
return(-fn_dados)
}
res <- suppressWarnings(optim(ll, par = c(rep(0, times = ncol(cov)+1)), method = 'BFGS',
upper = 10^3, lower = -10^3, ndeps = 1e-5))
parametro <- res$par
verossimilhança <- res$value
cat('Parâmetro estimado:', parametro,'\n',
'Verossimilhança completa do modelo nulo:', verossimilhança, "\n",
'Graus de liberdade',length(dados)-ncol(cov)-1
)
}
cov_model(data = am, n = 1, cov = cov_mtcars)
cov_model <- function(data, n, cov){
dados <- data
vars <- as.matrix(cbind(rep(1, times = length(dados)), cov))
pars <- matrix(nrow = ncol(vars), 1)
ll <-  function(pars){
fn_dados <- 0
for(i in c(1:length(dados))){
fato <- log(factorial(n)/(factorial(n-dados[i])*factorial(dados[i])))
rep <- fato + dados[i]*vars[i,]%*%pars - n*log(1+ exp(vars[i,]%*%pars))
fn_dados <- fn_dados + rep
}
return(-fn_dados)
}
res <- suppressWarnings(optim(ll, par = c(rep(0, times = ncol(cov)+1)), method = 'BFGS',
upper = 10^3, lower = -10^3, maxit = 1000))
parametro <- res$par
verossimilhança <- res$value
cat('Parâmetro estimado:', parametro,'\n',
'Verossimilhança completa do modelo nulo:', verossimilhança, "\n",
'Graus de liberdade',length(dados)-ncol(cov)-1
)
}
cov_model(data = am, n = 1, cov = cov_mtcars)
cov_model <- function(data, n, cov){
dados <- data
vars <- as.matrix(cbind(rep(1, times = length(dados)), cov))
pars <- matrix(nrow = ncol(vars), 1)
ll <-  function(pars){
fn_dados <- 0
for(i in c(1:length(dados))){
fato <- log(factorial(n)/(factorial(n-dados[i])*factorial(dados[i])))
rep <- fato + dados[i]*vars[i,]%*%pars - n*log(1+ exp(vars[i,]%*%pars))
fn_dados <- fn_dados + rep
}
return(-fn_dados)
}
res <- suppressWarnings(optim(ll, par = c(rep(0, times = ncol(cov)+1)), method = 'BFGS',
upper = 10^3, lower = -10^3, factr = 1e9))
parametro <- res$par
verossimilhança <- res$value
cat('Parâmetro estimado:', parametro,'\n',
'Verossimilhança completa do modelo nulo:', verossimilhança, "\n",
'Graus de liberdade',length(dados)-ncol(cov)-1
)
}
cov_model(data = am, n = 1, cov = cov_mtcars)
cov_mtcars <- cbind(cyl, hp, mpg)
vars <- as.matrix(cbind(rep(1, times = length(am)), cov_mtcars))
cov_model <- function(data, n, cov){
dados <- data
vars <- as.matrix(cbind(rep(1, times = length(dados)), cov))
pars <- matrix(nrow = ncol(vars), 1)
ll <-  function(pars){
fn_dados <- 0
for(i in c(1:length(dados))){
fato <- log(factorial(n)/(factorial(n-dados[i])*factorial(dados[i])))
rep <- fato + dados[i]*vars[i,]%*%pars - n*log(1+ exp(vars[i,]%*%pars))
fn_dados <- fn_dados + rep
}
return(-fn_dados)
}
res <- suppressWarnings(optim(ll, par = c(rep(0, times = ncol(cov)+1)), method = 'BFGS',
upper = 10^3, lower = -10^3))
parametro <- res$par
verossimilhança <- res$value
cat('Parâmetro estimado:', parametro,'\n',
'Verossimilhança completa do modelo nulo:', verossimilhança, "\n",
'Graus de liberdade',length(dados)-ncol(cov)-1
)
}
cov_model(data = am, n = 1, cov = cov_mtcars)
cov_model(data = am, n = 1, cov = cov_mtcars)
glm(am~cyl + hp + mpg)
test <- glm(am~cyl + hp + mpg)
logLik(test)
test <- glm(am~cyl + hp + mpg, family = binomial())
test
logLik(test)
cov_model <- function(data, n, cov){
dados <- data
vars <- as.matrix(cbind(rep(1, times = length(dados)), cov))
pars <- matrix(nrow = ncol(vars), 1)
ll <-  function(pars){
fn_dados <- 0
for(i in c(1:length(dados))){
fato <- log(factorial(n)/(factorial(n-dados[i])*factorial(dados[i])))
rep <- fato + dados[i]*vars[i,]%*%pars - n*log(1+ exp(vars[i,]%*%pars))
fn_dados <- fn_dados + rep
}
return(fn_dados)
}
res <- suppressWarnings(optim(ll, par = c(rep(0, times = ncol(cov)+1)), method = 'BFGS',
upper = 10^3, lower = -10^3))
parametro <- res$par
verossimilhança <- res$value
cat('Parâmetro estimado:', parametro,'\n',
'Verossimilhança completa do modelo nulo:', verossimilhança, "\n",
'Graus de liberdade',length(dados)-ncol(cov)-1
)
}
cov_model(data = am, n = 1, cov = cov_mtcars)
cov_model <- function(data, n, cov){
dados <- data
vars <- as.matrix(cbind(rep(1, times = length(dados)), cov))
pars <- matrix(nrow = ncol(vars), 1)
ll <-  function(pars){
fn_dados <- 0
for(i in c(1:length(dados))){
fato <- log(factorial(n)/(factorial(n-dados[i])*factorial(dados[i])))
rep <- fato + dados[i]*vars[i,]%*%pars - n*log(1+ exp(vars[i,]%*%pars))
fn_dados <- fn_dados + rep
}
return(-fn_dados)
}
res <- suppressWarnings(optim(ll, par = c(rep(0, times = ncol(cov)+1)), method = 'BFGS',
upper = 10^3, lower = -10^3))
parametro <- res$par
verossimilhança <- res$value
cat('Parâmetro estimado:', parametro,'\n',
'Verossimilhança completa do modelo nulo:', verossimilhança, "\n",
'Graus de liberdade',length(dados)-ncol(cov)-1
)
}
cov_model(data = am, n = 1, cov = cov_mtcars)
test <- glm(am~cyl + hp + mpg, family = binomial())
logLik(test)
test
cov_model(data = am, n = 1, cov = cov_mtcars)
cov_model <- function(data, n, cov){
dados <- data
vars <- as.matrix(cbind(rep(1, times = length(dados)), cov))
pars <- matrix(nrow = ncol(vars), 1)
ll <-  function(pars){
fn_dados <- 0
for(i in c(1:length(dados))){
rep <-  dados[i]*vars[i,]%*%pars - n*log(1+ exp(vars[i,]%*%pars))
fn_dados <- fn_dados + rep
}
return(-fn_dados)
}
res <- suppressWarnings(optim(ll, par = c(rep(0, times = ncol(cov)+1)), method = 'BFGS',
upper = 10^3, lower = -10^3))
parametro <- res$par
verossimilhança <- res$value
cat('Parâmetro estimado:', parametro,'\n',
'Verossimilhança completa do modelo nulo:', verossimilhança, "\n",
'Graus de liberdade',length(dados)-ncol(cov)-1
)
}
cov_model(data = am, n = 1, cov = cov_mtcars)
cov_model <- function(data, n, cov){
dados <- data
vars <- as.matrix(cbind(rep(1, times = length(dados)), cov))
pars <- matrix(nrow = ncol(vars), 1)
ll <-  function(pars){
fn_dados <- 0
for(i in c(1:length(dados))){
fato <- log(factorial(n)/(factorial(n-dados[i])*factorial(dados[i])))
rep <- fato + dados[i]*vars[i,]%*%pars - n*log(1+ exp(vars[i,]%*%pars))
fn_dados <- fn_dados + rep
}
return(-fn_dados)
}
res <- suppressWarnings(optim(ll, par = c(rep(0, times = ncol(cov)+1)), method = 'BFGS',
upper = 10^3, lower = -10^3))
parametro <- res$par
verossimilhança <- res$value
cat('Parâmetro estimado:', parametro,'\n',
'Verossimilhança completa do modelo nulo:', verossimilhança, "\n",
'Graus de liberdade',length(dados)-ncol(cov)-1
)
}
cov_model(data = am, n = 1, cov = cov_mtcars)
cov_model <- function(data, n, cov){
dados <- data
vars <- as.matrix(cbind(rep(1, times = length(dados)), cov))
pars <- matrix(nrow = ncol(vars), 1)
fn_dados <- 0
ll <-  function(pars){
for(i in c(1:length(dados))){
fato <- log(factorial(n)/(factorial(n-dados[i])*factorial(dados[i])))
rep <- fato + dados[i]*vars[i,]%*%pars - n*log(1+ exp(vars[i,]%*%pars))
fn_dados <- fn_dados + rep
}
return(-fn_dados)
}
res <- suppressWarnings(optim(ll, par = c(rep(0, times = ncol(cov)+1)), method = 'BFGS',
upper = 10^3, lower = -10^3))
parametro <- res$par
verossimilhança <- res$value
cat('Parâmetro estimado:', parametro,'\n',
'Verossimilhança completa do modelo nulo:', verossimilhança, "\n",
'Graus de liberdade',length(dados)-ncol(cov)-1
)
}
cov_model(data = am, n = 1, cov = cov_mtcars)
test
vars <- as.matrix(cbind(rep(1, times = length(am)), cov_mtcars)
cov_model <- function(data, n, cov){
dados <- data
vars <- as.matrix(cbind(rep(1, times = length(dados)), cov))
pars <- matrix(nrow = ncol(vars), 1)
fn_dados <- 0
ll <-  function(pars){
for(i in c(1:length(dados))){
fato <- log(factorial(n)/(factorial(n-dados[i])*factorial(dados[i])))
rep <- fato + dados[i]*vars[i,]%*%pars - n*log(1+ exp(vars[i,]%*%pars))
fn_dados <- fn_dados + rep
}
return(-fn_dados)
}
res <- suppressWarnings(optim(ll, par = c(rep(0, times = ncol(cov)+1)), method = 'BFGS',
upper = 10^3, lower = -10^3))
parametro <- res$par
verossimilhança <- res$value
cat('Parâmetro estimado:', parametro,'\n',
'Verossimilhança completa do modelo nulo:', verossimilhança, "\n",
'Graus de liberdade',length(dados)-ncol(cov)-1
)
}
cov_model(data = am, n = 1, cov = cov_mtcars)
test <- glm(am~cyl + hp + mpg, family = binomial())
logLik(test)
test
vars <- as.matrix(cbind(rep(1, times = length(am)), cov_mtcars))
vars
vars <- as.matrix(cbind(am, rep(1, times = length(am)), cov_mtcars))
vars
mtcars
View(cov_mtcars)
View(vars)
head(mtcars)
cov_model <- function(dados, n, cov){
vars <- as.matrix(cbind(rep(1, times = length(dados)), cov))
pars <- matrix(nrow = ncol(vars), 1)
fn_dados <- 0
ll <-  function(pars){
for(i in c(1:length(dados))){
fato <- log(factorial(n)/(factorial(n-dados[i])*factorial(dados[i])))
rep <- fato + dados[i]*vars[i,]%*%pars - n*log(1+ exp(vars[i,]%*%pars))
fn_dados <- fn_dados + rep
}
return(-fn_dados)
}
res <- suppressWarnings(optim(ll, par = c(rep(0, times = ncol(cov)+1)), method = 'BFGS',
upper = 10^3, lower = -10^3))
parametro <- res$par
verossimilhança <- res$value
cat('Parâmetro estimado:', parametro,'\n',
'Verossimilhança completa do modelo nulo:', verossimilhança, "\n",
'Graus de liberdade',length(dados)-ncol(cov)-1
)
}
cov_model(data = am, n = 1, cov = cov_mtcars)
cov_model(dados = am, n = 1, cov = cov_mtcars)
cov_model <- function(dados, n, cov){
vars <- as.matrix(cbind(rep(1, times = length(dados)), cov))
pars <- matrix(nrow = ncol(vars), 1)
fn_dados <- 0
ll <-  function(pars){
for(i in c(1:length(dados))){
fato <- log(factorial(n)/(factorial(n-dados[i])*factorial(dados[i])))
rep <- fato + dados[i]*vars[i,]%*%pars - n*log(1+ exp(vars[i,]%*%pars))
fn_dados <- fn_dados + rep
}
return(-fn_dados)
}
res <- suppressWarnings(optim(ll, par = c(rep(0, times = ncol(cov)+1)), method = 'BFGS',
upper = 10^3, lower = -10^3))
parametro <- res$par
verossimilhança <- res$value
cat('Parâmetro estimado:', parametro,'\n',
'Verossimilhança completa do modelo nulo:', verossimilhança, "\n",
'Graus de liberdade',length(dados)-ncol(cov)-1
)
}
cov_model(dados = am, n = 1, cov = cov_mtcars)
test
cov_model <- function(dados, n, cov){
vars <- as.matrix(cbind(rep(1, times = length(dados)), cov))
pars <- matrix(nrow = ncol(vars), 1)
fn_dados <- 0
ll <-  function(pars){
for(i in c(1:length(dados))){
fato <- log(factorial(n)/(factorial(n-dados[i])*factorial(dados[i])))
rep <- fato + dados[i]*vars[i,]%*%pars - n*log(1+ exp(vars[i,]%*%pars))
fn_dados <- fn_dados + rep
}
return(-fn_dados)
}
res <- suppressWarnings(optim(ll, par = rep(0, times = ncol(vars)), method = 'BFGS',
upper = 10^3, lower = -10^3))
parametro <- res$par
verossimilhança <- res$value
cat('Parâmetro estimado:', parametro,'\n',
'Verossimilhança completa do modelo nulo:', verossimilhança, "\n",
'Graus de liberdade',length(dados)-ncol(cov)-1
)
}
cov_model(dados = am, n = 1, cov = cov_mtcars)
cov_model <- function(dados, n, cov){
vars <- as.matrix(cbind(rep(1, times = length(dados)), cov))
pars <- matrix(nrow = ncol(vars), 1)
fn_dados <- 0
ll <-  function(pars){
for(i in c(1:length(dados))){
fato <- log(factorial(n)/(factorial(n-dados[i])*factorial(dados[i])))
rep <- fato + dados[i]*vars[i,]%*%pars - n*log(1+ exp(vars[i,]%*%pars))
fn_dados <- fn_dados + rep
}
return(-fn_dados)
}
res <-optim(ll, par = rep(0, times = ncol(vars)), method = 'BFGS',
upper = 10^3, lower = -10^3)
parametro <- res$par
verossimilhança <- res$value
cat('Parâmetro estimado:', parametro,'\n',
'Verossimilhança completa do modelo nulo:', verossimilhança, "\n",
'Graus de liberdade',length(dados)-ncol(cov)-1
)
}
cov_model(dados = am, n = 1, cov = cov_mtcars)
cov_model <- function(dados, n, cov){
vars <- as.matrix(cbind(rep(1, times = length(dados)), cov))
pars <- matrix(nrow = ncol(vars), 1)
fn_dados <- 0
ll <-  function(pars){
for(i in c(1:length(dados))){
fato <- log(factorial(n)/(factorial(n-dados[i])*factorial(dados[i])))
rep <- fato + dados[i]*vars[i,]%*%pars - n*log(1+ exp(vars[i,]%*%pars))
fn_dados <- fn_dados + rep
}
return(-fn_dados)
}
res <-optim(ll, par = rep(0, times = ncol(vars)), method = 'BFGS')
parametro <- res$par
verossimilhança <- res$value
cat('Parâmetro estimado:', parametro,'\n',
'Verossimilhança completa do modelo nulo:', verossimilhança, "\n",
'Graus de liberdade',length(dados)-ncol(cov)-1
)
}
cov_model(dados = am, n = 1, cov = cov_mtcars)
cov_model <- function(dados, n, cov){
vars <- as.matrix(cbind(rep(1, times = length(dados)), cov))
pars <- matrix(nrow = ncol(vars), 1)
fn_dados <- 0
ll <-  function(pars){
for(i in c(1:length(dados))){
fato <- log(factorial(n)/(factorial(n-dados[i])*factorial(dados[i])))
rep <- fato + dados[i]*vars[i,]%*%pars - n*log(1+ exp(vars[i,]%*%pars))
fn_dados <- fn_dados + rep
}
return(-fn_dados)
}
if(ncol(vars)>1){
res <-optim(ll, par = rep(0, times = ncol(vars)), method = 'BFGS')}
else{res <-optim(ll, par = rep(0, times = ncol(vars)), method = 'Brent',
upper = 10^3, lower = -10^3)}
parametro <- res$par
verossimilhança <- res$value
cat('Parâmetro estimado:', parametro,'\n',
'Verossimilhança completa do modelo nulo:', verossimilhança, "\n",
'Graus de liberdade',length(dados)-ncol(cov)-1
)
}
cov_model(dados = am, n = 1, cov = cov_mtcars)
